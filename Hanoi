class Stack:
    def __init__(self):
        # array
        self.stack = []

    def pop(self):
        if self.isempty():
            return None
        else:
            return self.stack.pop()

    def push(self, val):
        return self.stack.append(val)

    def peak(self):
        if self.isempty():
            return None
        else:
            return self.stack[-1]

    def size(self):
        return len(self.stack)

    def isempty(self):
        return self.size() == 0

    def display(self):
        print self.stack


class Hanoi:
    def __init__(self):
        self.temporary = Stack()
        # temporary stack will help not to loose objects while sorting
        self.input = Stack()
        self.output = Stack()

    def place(self, data):
        # in descending order
        for k in data:
            self.input.push(k)
        while self.input.isempty() != bool(1):
            # works while is not empty
            self.temporary = self.input.peak()
            self.input.pop()
            while self.output.isempty() != bool(1) and int(self.output.peak()) < int(self.temporary):
                self.input.push(self.output.peak())
                self.output.pop()
            self.output.push(self.temporary)
        self.output.display()


def main():
    sortdata = Hanoi()
    print ("bigger one is put at first")
    sortdata.place((8, 14, 28, 25, 9, 5))
    print ("*") * 50


main()
